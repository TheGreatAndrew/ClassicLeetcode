############### PYTHON 
### GENERAL
technique
    how to pass list to a function, but only deepcopy() style 
zip() : pair elements in same position in 2 list
hash() : 
sign = [-1, 1][ss=="+"] -> same as sign = 1 if ss=='+' else -1
@cache : cache the results of functions
generator expression and sum :
nonlocal
@lru_cache(maxsize=None) : cache the result of your function with LRU (if maxsize=None then no more LRU)
s[::-1] : reverse s 
Strings are immutable, variables can point at whatever they want.
hash function : key->hash function->hash
hashing : good hasing function is one-way. we can avoid collisions. hash (or hash value) becomes index for hash table
generator
reduce()
mul()
set : unchangable, but can add and remove items
* asterisk is multiply list, unpacking list, *args for any arguments


## pass arguments
call by object reference or call by assignment
    immutable is call by value
    mutable is call by reference
variable 
    assign a var -> is binding a name (var) to an object    

python reassign list, will have different id 



### regex
https://www.youtube.com/watch?v=K8L6KVGG-7o 6:00
import re 
+ : 1 or more 
(option1|option2)
r'' for raw string 
re.search("[a-zA-Z0-9]+@[a-zA-Z]+\.(com|edu|net)", "andrewvu22@gmail.com")
re.sub("(\d\d)-(\d\d)-(\d\d\d\d)", r"\1\2\3", "21-03-1999")

pattern = re.compile(r'abc')
matches = pattern.finditer(data)
for match in matches : 
    print(match)



### lambda 
why use -> anoymous lambda function to used with higher-order function (like filter or map)





### error 
unhashable type : immutable objects such as tuples are hashable since they have a single unique value that never changes, list can't 

### MATH
eval()

### COPY
shadow copy and deep copy 
deep copy : change to 2nd do not reflect on original
shadow copy : 
shallow list -> 


### STAR *
star
    unpacks tuple and put them as positional arguments for function
    *args for rest arguments 
    **kwargs passing a lit 

### bisect
bisect : binary search algorithm


### IO 
try open finally close 
w : overwrite 
f.write() 
read(5) : read 5 char 
tell() : get current file position
seek(0) : go to location 0 
for line in f : print(line, end = '')


#timestamp
time, date, calendar





### dict
max(lst,key=lst.count) : 
max(word_count.items(), key=operator.itemgetter(1))[0] : get items() key-value, then sort by 'value', and return first one 

### rebind
# assign (in other languages) : assign 5 to variable a -> variable b is a different box
# name/ identifier (in Python) : variable a, b bound to same object. can reassign
# assign : var will refer to another object value. assignment never copies value
# assign/ binding/ reassign/ rebinding
# Immutable values : numbers, strings, and tuples -> it doesnâ€™t change, it creates a new value 
# Mutable : the rest, including lists, dicts, and user-defined objects
# assignment for immutable values will return new value, so there won't be any surprise


### function 
# default paramter values -> function default value is evaluated at function definition time, not everytime you call a function -> solution is to create initial value inside function at runtime
# argument are passed by assignment
    # mutable : can mutate, can rebind but not outer scope
    # immutable : can rebind but not outer scope  