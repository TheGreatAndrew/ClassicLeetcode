Software Design Patterns (book)
terms
wrapper : is decorator
Aggregation or Composition -> An object can use the behavior of various classes, having references to multiple objects and delegating them all kinds of work



############### SOLID Principles
hardly any successful software uses all those 5
Single Responsibility Principle : 
    class responsible for one thing, with hidden/ encapsulated logics
Open/Close Principle : 
    a class is open for extends, but close for modification 
    final -> the class is no longer open
Liskov Substitution Principle
    Subclass’s object can replace parent’s object without breaking client’s code -> in subclass, when override a method. Extend the behavior rather than replacing with something else entirely. 
has a checklist
Interface Segregation Principle : 
    make your interfaces narrow enough, so that the client classes don’t need to implement the behaviors they don’t need
Dependency Inversion Principle
    dependency inversion : dependency injection, decoupling of software modules  
    what is dependencies -> 
        if an object A needs to call a method in object B, then object A depends on object B. In other words, object B is a dependency of object A.
    what is dependency inversion -> 
        With dependency injection, the logging class will be "injected" into the classes that need to log things, for example by passing the logging class via the constructor.
        example -> Manage Class needs to log(), log() is from Logging Class, Logging Class is a dependency of Manage Class 
        
        And you can make the classes depend on an interface instead so that it's easy to swap logging libraries (which may require wrappers to conform to your interface) or perhaps for testing purposes.
        example -> 
        And if you have Logging Interface you can have LoggingPhone Class or LoggingComputer Class



############### Creational Design Pattern
creational design pattern -> object creation. help with resuablity. 

<>Factory Method
https://refactoring.guru/design-patterns/factory-method
    when to use ->
        to add new product type 
    factory method -> 
        The Factory Method separates product construction code from the code that actually uses the product.
        to add a new product type to the app, you’ll only need to create a new creator subclass and override the factory method in it.
        example to add new product -> create PhoneDialog that overrides Factory Method, and have PhoneButton
    code -> 
        class Dialog : creator, with createButton() as Factory Method 
        class WindowsDialog, class WebDialog : creator sublass or concrete creator
        interface Button : product
        class WindowsButton, class HTMLButton
        Application -> Dialog.render() -> render() createButton() -> WindowsDialog -> WindowsButton
 


<>Abstract Factory
https://refactoring.guru/design-patterns/abstract-factory
    when to use ->
        Macbook family 
    abstract factory ->
        produce families of related objects without specifying their concrete classes
        RedButton, BlueButton would extends from abstract. But MacButton, MacCheckbox would be in Macbook family 
    code -> 
        interface GUIFactory : abstract factory interface 
        class WinFactory, class MacFactory : concrete factory 
        interface Button, class WinButton, class MacButton 
        ApplicationConfigurator with Application(new MacFactory) -> Application with constructor(GUiFactory)



<>Builder
rather than constructor, use construction method to add properties 
myLunch().addMeat().addVegetable() 


<>Prototype (clone)
normally object inherits from class, but clone object from Object.create(oldObject). This is better for hierarchy, and flat prototype chain, which makes it easier to share functionalities  
‘prototype’ in JS is its constructor


<>Singleton
class only has 1 object with global access point 

############### Structural Design Pattern
<>adapter
convert the interface of one object so that another object can understand it
<><>

<>bridge
split a closely related classes -> into two separate hierarchies abstraction and implementation

<>composite
let you compose objects to tree structure

<>decorator
https://refactoring.guru/design-patterns/decorator 
    when to use -> 
        attach new behaviors to objects by placing these objects inside special wrapper objects
    decorator ->
        attach new behaviors to objects by placing these objects inside special wrapper objects
    how to do ->
        DataSource is interface to both wrapper (decorator) and object 
        class FileDataObject : object 
        DataSourceDecoder : base decorator 
        CompressionDecorator, EncryptionDecorator : concrete decorator 
        Application new FileDataSource, new CompresionDecorator, EncryptionDecorator -> DataSource interface 



<>facade
the details of ElectricalSystem -> House simplified wrapper hide the details -> for the Client


<>flyweight
fit more objects into available RAM by sharing common state

<>proxy (substitute) 
https://refactoring.guru/design-patterns/proxy
    proxy control access to the original object (can also for cache)
    -> example CachedYouTubeClass  
    if (listCache == null)
        listCache = service.listVideos()

book
    create a proxy copy from the original, whenever the proxy is changed, the function with it is changed 



############### Behavioral Design Pattern
<>chain of responsibility 
pass requests along chain of handlers

<>command
turn request into object with all info about the request, this wll add functionalities

<>iterator
to iterate a collections 


<>mediator
restrict direct communications between objects, and can only collaborate through mediator
middleware 


<>memento
save and restore previous state of an object, without revealing the details

<>observer
a push system for subscription 
tv1 = news.subscribe(i => console.log(I))

<>state
object alter its behavior when its internal state changes
new HappyState()
this.state.think()

<>strategy



<>Template method
superclass defines skeleton, subclass can override it but not the structure



<>Visitor
 separate algorithms from objects, the objects are where they used to operate




############### EXTRA NOT IN THE BOOK
