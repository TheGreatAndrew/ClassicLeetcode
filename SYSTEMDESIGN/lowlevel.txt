https://www.davidseek.com/ood/
    ask questions
    code : abstract, override 

https://leetcode.com/discuss/interview-question/object-oriented-design/124744/Design-an-online-hotel-booking-system 
    how to do ->
        3 enums, 7 classes

design Alexa devices 
    https://leetcode.com/discuss/interview-question/object-oriented-design/1510642/OOP-Alexa-device-input-and-output.-help-me-design-it./1115825 
    https://onecompiler.com/java/3ycknarrs

https://leetcode.com/discuss/interview-question/object-oriented-design/1510642/OOP-Alexa-device-input-and-output.-help-me-design-it./1115825
    a


https://leetcode.com/problems/design-twitter do it myself in 45m
    how to do ->
        just look at the 3 data structures i have 

https://leetcode.com/problems/design-underground-system/ do it myself 
    how to do -> 
        in_dict = { uid : [start, startTime]  }
        in_out_dict = { (start, end) : [time1, time2] }
        need to have checkIn then checkOut to log to result 





elavator system 
    My Design 
    Elavator has 3 states, so we can use enum cause it's more stable 

    https://www.youtube.com/watch?v=siqiJAJWUVg 7
    don't overcomplicate the system 
    Description
        can be single elevator
        3 states : go up, down, idle enum 
        from 1 floor to another 
        open door when idle 
        200 floors 
        minimize wait time 

parking lot 
    https://leetcode.com/discuss/interview-question/object-oriented-design/124739/Parking-Lot-Design-Using-OO-Design
    design : 
        ParkingStatus enum
        VehicleType enum 
        SlotSize enum
            ??? 
        
        ParkingSlot class
            String slotId 
            ParkingStatus parkingStatus
            SlotSize slotSize 
            Vehicle vehicle
            parkVehicle()
            emptySlot()
        Floor class 
            String floorId
            List<ParkingSlot> parkingSlots
            emptyFloor()
        Parking class
            String parkingId
            List<Floor> floors
            String address
            emptyWholeParkingLot()

        Vehicle interface
            VehicleType getType()
        Bike class implements Vehicle 
            String bikeNumber
            override getType() 
        HatchBackCar implements Vehicle
            String carNumber
            override getType()
        SedanCar implements Vehicle
            String carNumber
            override getType()  

        FareController class
            Map<Vehicle, ParkingDetails>
            onVehicleEntry()
            onVehicleExit()
            getFare()
            getFare() to calculate fare but it's empty cause unneccessary 
        ParkingDetails class
            Vehicle vehicle
            Parking parking
            Date entryTime
            Date exitTime
            STATIC OCCUPIED_PARKING_SLOT 

book my show 
    https://leetcode.com/discuss/interview-question/object-oriented-design/1320604/Book-My-Show-or-Low-Level-Design abstract 
    question : 
        book my show, movie with theater 
    design but only with List<>, Map<> and extends: 
        SeatStatus enum 
        Gender enum 
        Genre enum
        MovieRating enum
        BookingStatus enum

        BMS abstract class
            List<Theater> theaters
            List<Movie> getMovies()
            List<Theater> getTheaters()

        Theater abstract class
            Address adress
            List<Audi> audi
            Map<Date, Movie> getMovie()

        Theater/Standup/Speech class extends Theater

        Audi class 
            ...

        Address class
        Show class
        Seat class 
        SilverSeat/ GoldSeat class 
        Person abstract class 
        Actor class extends Person 
        Customer class extends Person 
        Movie class 
        Booking class
        Payment class 
    design recommendations 
        BoxSeat/GoldSeat as decorator pattern -> Seat is object, SilverSeat and 
        A factory method or abstract factory to create the objects needs to be added -> 
        An abstract class for Theater because BMS also sells or would want to sell tickets for other events like IPL/Theater/Standup-comedy -> BMS still use List<Theater> to manage 
        Would prefer abstract class for BMS also -> but its useless here ... 
        Proxy pattern(to handle auth) could be used for payment class -> CheckAuth(){go to person to check ID with API}


https://leetcode.com/discuss/interview-question/609070/Amazon-OOD-Design-Unix-File-Search-API
        



vending machine 
    https://leetcode.com/discuss/interview-question/object-oriented-design/125218/Design-a-vending-machine
    abstract 
