##### OOP with Java 
abstraction : exposing only the relevant details
    example -> abstract class, interface  
encapsulation : superclass hides sensitive data 
    example -> private, get, set
inheritance : reuseability of code
    example -> superclass, childclass 
polymorphism : existing in many form 
    compile time polymorphism -> overloading is same name different params. 
        static binding  -> map method. speed is slow. 
    run time polymorphism -> overriding is same name same params in superclass and child.
        dynamic binding -> map method. speed is high. 

##### topics and articles
instance : object is called instance sometimes
functional 
    Functional programming provides advantages like efficiency, lazy evaluation, nested functions, bug-free code, parallel programming 
    1. High Order Functions (HOF). 2. Pure functions. 3. Recursion. 4. Strict and Non-strict Evaluation. 5. Type systems. 6. Referential Transparency

functional vs object 
    functional use immutable data ^^^ 
    functional follows declarative ^^^ OOP follows imperative -> declarative you say what you want [x for x in range(20) if x < 5], imperative you explain steps by steps 
    functional supports parallel programming ^^^ OOP doesn't support parallel 
    funcitonal can be executed in any order ^^^ 
    basic are var and func ^^^ object and method 
    no side effects means it does not impact code running on multiple processors ^^^ 
    support big data processing ^^^ 
    



interface 
    usage -> unrelated classes cause you can implement multi interfaces 
    https://www.geeksforgeeks.org/interfaces-in-java 
        everything in interface is abstract 
        Interfaces and interface methods are implicity ‘abstract’
        all interface methods are implicitly ‘public’
        interface specify what a class must do -> it doesn't implement method, need to declares it abstract
abstract 
    usage -> related classes 
    https://www.geeksforgeeks.org/abstract-keyword-in-java/
        abstract class : some classes are abstract, some classes have definitions
        abstract method : non-abstract class can’t have abstract method
more on differences
    abstract -> some are implemented so you don’t have implement all. For interface, you need to implements all in child class 
    abstract -> can have access modifiers. Interface only has public
    abstract class -> can have data fields
static  
    https://www.baeldung.com/java-static 
    static : belong to a type, rather to instances of that type
    static field : unique no matter how many time init the class
    static block : just like static var
    inner classes have access to all members of the enclosing class (including private), whereas the static nested classes only have access to static members of the outer class.
    static are resolved at compile time. And override is at runtime. Static can’t be override.
static
    https://www.geeksforgeeks.org/static-keyword-java/
    static : share same var or method of a class. access just with a class. 
    static block : can init value by doing it in static block
    static order come first 
composition : combine classes, unlike inheritance get from a base class
    example -> 
final
    prevent inheritance, prevent overriden
Compare 
    Comparable : interface. compareTo. this is inside the class
    Comparator : interface. compare. this is another class, just like extra features.
singleton
    create 1 instance of Object
    with static 

binding
    https://www.geeksforgeeks.org/static-vs-dynamic-binding-in-java/ 
    private, final and static are static binding
    virtual method are dynamic binding (Java methods are all virtual)
    overload methods are static binding, overridden methods use dynamic binding 

UML
    https://www.educative.io/courses/grokking-the-object-oriented-design-interview/g7Lw3O0A2Aj
    Association : bi-directional general relationship
        example -> Book and Author can call each other
    
    Multiplicity : “0…*” zero to many, “2…4” two to four 
        example -> 
    Aggregation : class can exist independently 
        example -> Notification<-EmailNotification, EmailNotification has an instance of Notification. Notification can exist independently
    Composition : same as Aggregation, but class is dependent  
        example -> Account<-LibraryCard. Account has an instance of LibraryCard. LibraryCard dependent. 
    Generalization : combine multiple similar classes into one -> example is Pilot, Crew are all Person 
        example -> Catalog implements Search interface 
    Inheritance 
        example -> EmailNotification extends Notification superclass 
    Use Interface 
        example -> Account uses Search interface 
    Dependency : the clients depend on a supplier 

    https://www.educative.io/courses/grokking-the-object-oriented-design-interview/RMlM3NgjAyR
    enum, Address class, Person data class, constraints 
    Account abstract, Member class, Librarian class 
    BookRervation, BookLending, Fine class 
    Book abstract, BookItem  
    Search interface, Catalog implements Search 


##### OOP Java code 

