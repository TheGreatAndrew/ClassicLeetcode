############### THIS IS A LIST OF GRAPH, NO MATRIX AND NO TREE 
https://leetcode.com/discuss/general-discussion/655708/graph-for-beginners-problems-pattern-sample-solutions/
patterns
    Union Find 
        subpattern -> finding groups or components 
    Depth First Search  
        subpattern -> Start DFS from nodes at boundary
        subpattern -> Time taken to reach all nodes or share information to all graph nodes
        subpattern -> DFS from each unvisited node/Island problems
        subpattern -> Cycle Find 
    Breath First Search 
        subpattern -> Shortest Path 
    Graph coloring/ Bipartition
        when to use -> Problems asks to check if its possible to divide the graph nodes into 2 groups
    Topological Sort   
        when to use -> Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0
    Find Shortest Path (Dijkstra's/Bellman Ford)
        when to use -> Shortest Path 
       
### general 
https://leetcode.com/problems/is-graph-bipartite/ do it myself in 30+ minutes 
    advice 
        depth first search can be level order traversal 
    how to do -> 

### Lowest Common Ancestor 
https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/
    what's cool ->
        subproblem -> tree from node A to node B
        subproblem -> 

    https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/discuss/2005805/Python3-DFS-easy-solution-using-deque
        how to do ->
            (path to start, path to end, then lowest common ancestor)
    https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/discuss/1612071/Accepted-Python-Super-Simple-or-DFS-%2B-BFS
        how to do ->
            (simple DFS to collect start and end, also add 'parent' attribute to ListNode)
            (then BFS)



### Union Find 

### Depth First Search  

### Breath First Search 

### Graph coloring/ Bipartition

### topological sort 




### Find Shortest Path (Dijkstra's/Bellman Ford)  
guide  
    Dijkstra's algorithm -> 
    Bellman Ford's algorithm -> 
    they both for single source shortest path https://www.geeksforgeeks.org/what-are-the-differences-between-bellman-fords-and-dijkstras-algorithms/

Dijkstra's
    principals 
        pick starting node 
        check shortest among neighbor nodes (not among all nodes)
        plus the cost from C if go indirect A->C->B
        O(E+VlogV) if a heap is used
    algo 
        use min heap for shortest 
        add the costs of the edges in heap A->B or A->C->B

    https://www.youtube.com/watch?v=_lHSawdgXpI short pseudo code at the end 
    https://leetcode.com/problems/network-delay-time/
        how to do -> simple BFS with Dijkstra 
        question -> what if [2,4] [2,3] [2,4]
    https://leetcode.com/problems/path-with-minimum-effort/ do it myself in 30+ minutes 
        how to do -> Dijkstra
        speed : O(E + Vlog(V))
        space : visitSet will be O(n)  in worst case

Bellman Ford



############### OTHER PATTERNS I WILL CATEGORIZE LATER 
https://leetcode.com/discuss/general-discussion/1122034/important-graph-algorithm-notes-for-interview


############### MINIMUM SPANNING TREE
### guide
spanning tree : given undirected, connected graph G. Spanning tree is a subgraph of G, includes all vertices with min possible number of edges 
minimum spanning tree : 
    spanning tree with weights, sum of the weights of edges is as min as possible 
    if n vertices, n-1 edges 
Prim's Algorithm : usually more efficient 
    programiz.com/dsa/prim-algorithm great website 
    greedy algo
    start with smallest edges
    keep adding smallest edges to previous 
Kruskal's Algorithm : 
    purpose -> detect cycle
    greedy algo 
    start with smallest edges 
    get smallest edges, but it doesn't need to connect with previous 
    if new edge forming a cycle, don't 
    speed O(n^2)
    with min heap it's O(nlogn)

Prim 
    https://leetcode.com/problems/min-cost-to-connect-all-points/


