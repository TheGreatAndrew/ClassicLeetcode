############### THIS IS A LIST OF GRAPH, NO MATRIX AND NO TREE 
https://leetcode.com/discuss/general-discussion/655708/graph-for-beginners-problems-pattern-sample-solutions/
patterns
    Union Find 
        subpattern -> finding groups or components 
    Depth First Search  
        subpattern -> Start DFS from nodes at boundary
        subpattern -> Time taken to reach all nodes or share information to all graph nodes
        subpattern -> DFS from each unvisited node/Island problems
        subpattern -> Cycle Find 
    Breath First Search 
        subpattern -> Shortest Path 
    Graph coloring/ Bipartition
        when to use -> Problems asks to check if its possible to divide the graph nodes into 2 groups
    Topological Sort   
        when to use -> Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0
    Find Shortest Path (Dijkstra's/Bellman Ford)
        when to use -> Shortest Path 
       
### general 
https://leetcode.com/problems/is-graph-bipartite/ do it myself in 30+ minutes 
    advice 
        depth first search can be level order traversal 
    how to do -> 




### Union Find 

### Depth First Search  

### Breath First Search 

### Graph coloring/ Bipartition

### topological sort 




### Find Shortest Path (Dijkstra's/Bellman Ford)  
guide  
    Dijkstra's algorithm -> 
    Bellman Ford's algorithm -> 
    they both for single source shortest path https://www.geeksforgeeks.org/what-are-the-differences-between-bellman-fords-and-dijkstras-algorithms/

# Dijkstra's
guide 
    principals 
        pick starting node 
        check shortest among neighbor nodes (not among all nodes)
        plus the cost from C if go indirect A->C->B
        O(ElogV) if a heap is used
    algo 
        use min heap for shortest 
        add the costs of the edges in heap A->B or A->C->B

more guide     
https://www.youtube.com/watch?v=_lHSawdgXpI 
    short pseudo code at the end 
https://www.youtube.com/watch?v=XB4MIexjvY0
    Dijkstra is greedy
    can work on directed, undirected graph 
    relaxation : update vertex's cost 
    also work with negative weights
Dijkstra's algorithm : shortest path from one node to every other nodes  
    step 1 -> priority queue with distance_from_source, and node 
    step 2 -> init distance to infinity 
    step 3 -> pick node with smallest distance, consider its neighbours

general 
https://leetcode.com/list/53js48ke/ 
    list 
https://leetcode.com/problems/network-delay-time/
    how to do -> simple BFS with Dijkstra 
    question -> what if [2,4] [2,3] [2,4]
    approach 1 -> dfs. 
    approach 2 -> bfs queue. 
    approach 3 -> priority queue. Dijkstra.
        TODO 
        time -> O(N+ElogN)
        space -> 
https://leetcode.com/problems/path-with-minimum-effort/ do it myself in 30+ minutes 
    how to do -> Dijkstra
    speed : O(E + Vlog(V))
    space : visitSet will be O(n)  in worst case



# Bellman Ford
guide 
    Bellman-Ford when to use 
        similar to BFS 
        why use Bellman-Ford -> because it has at most 'k' stops
        speed -> O(edges*k) or O(VE)
        it can deal with negative weights
    principals 
        a
    algo 
        a


general 
https://leetcode.com/problems/cheapest-flights-within-k-stops
    https://www.youtube.com/watch?v=5eIK3zUdYmE 
        what's cool -> traverse graph without using adjancency list or neighbours
        how to do -> 
            have prices[] and temp[]
            first layer k=0, prices[B] is infinity, temp[B] is 100. We still use infinity so temp[C] will have the bad 500 value
            update prices[] with temp[]
            second layer k=1, go all nodes of the graph again, this time prices[B] = 100 so we use that to calculate temp[C] = 200
        time -> 
            with k stops. 



############### OTHER PATTERNS I WILL CATEGORIZE LATER 
https://leetcode.com/discuss/general-discussion/1122034/important-graph-algorithm-notes-for-interview


############### MINIMUM SPANNING TREE
### guide
spanning tree : given undirected, connected graph G. Spanning tree is a subgraph of G, includes all vertices with min possible number of edges 
minimum spanning tree : 
    spanning tree with weights, sum of the weights of edges is as min as possible 
    if n vertices, n-1 edges 
Prim's Algorithm : usually more efficient 
    programiz.com/dsa/prim-algorithm great website 
    greedy algo
    start with smallest edges
    keep adding smallest edges to previous 
Kruskal's Algorithm : 
    purpose -> detect cycle
    greedy algo 
    start with smallest edges 
    get smallest edges, but it doesn't need to connect with previous 
    if new edge forming a cycle, don't 
    speed O(n^2)
    with min heap it's O(nlogn)


### prim's algo 
Prim's 
    principals 
        keep getting smallest cost, the one attached with previous 
        time O((V+E)logV)
    algo 
        visit set() 
        frontier minHeap 
        res 
        choose a random node 
        put all neighbor (cost, node) to frontier 
        choose smallest, repeat
    problem 
        https://leetcode.com/submissions/detail/741291968/
            how to do -> build adjacency list, then Prim's 
            time -> O(n^2 logn) cause (n^2) is number of potential edges, and (logn) come from Prim's cause Min Heap 
 
    https://leetcode.com/problems/min-cost-to-connect-all-points/


############### Topological
    knowledge 
        when -> 
            only for Directed Acylic Graph (directed and no cycle)
            directed cycle : can't have topological 
            acycle graph : don't have cycle 
        purpose -> schedule system where first task comes before second task
        example -> 
            take 0 before 2, take 1 before 2 so [2,0] and [2,1]
            0->2 1->2
            topological sort prints the one with no incoming edges first 
    principal 
        print all node with no incoming edges first 
        meaning traverse adjacency list and have cycle(), visit() 
    algo 
        loop all nodes 
        we have output[], visit set(), cycle() 
        if it's not in this cycle yet, we add to cycle
        then dfs 
        then cycle, visit, output add current 

    problems 
        https://leetcode.com/problems/course-schedule-ii/
            you don't need to know topological sort, this problem teaches u that
            how to do -> read 'algo' above
            
        https://leetcode.com/problems/course-schedule do it myself in topological sorting 
            https://leetcode.com/problems/course-schedule/discuss/58586/Python-20-lines-DFS-solution-sharing-with-explanation look at first comment 
            how to do dfs ->
                graph[take these after] = [prerequisites]
                3 states not visited, currently visiting, and visisted 
                visited is dictionary 
            https://leetcode.com/problems/course-schedule/discuss/441722/Python-99-time-and-100-space.-Collection-of-solutions-with-explanation
            how to do topological ->
                geeksforgeeks.org/topological-sorting-indegree-based-solution/ 
                0 incoming edges, incoming from prerequisites to course 
                1 vertex, with number of incoming edges 
                2 queue, with vertex with no incoming edges 

        https://leetcode.com/problems/minimum-height-trees/ topological
            https://leetcode.com/problems/minimum-height-trees/solution/
                centroids : (similar to root node) node that is close to all the peripheral nodes (leaf nodes)
                approach 0 : brute force just all tree, then choose smallest 
                how to do ->
                    (keep trimming leaf ndoes until only 1 or 2 centroids left)
                    queue to holds all leaves, bfs 
                    keep removing leaves, there will be new leaves, keep removing all 
                complexity
                    e = v-1 
                    time -> buildGraph O(v), initial leaves O(v), O(v+e)
                    space -> buildGraph O(v+e) 

            step base cases input only 2 nodes 
            step 1 -> get all leaves
            step 2 -> queue until only 2 nodes left. remove leaf from adjancency list (bi-directional). add new leaf.
        https://leetcode.com/problems/find-eventual-safe-states/ do it myself 
            how to do -> topological sorting, check if node's all neighborers are 'qualify' or not 
            time O(E+V) -> O(n) create adjList, O(E+V) 
            space O(3n) -> qualify, visit, adjList
            https://leetcode.com/problems/find-eventual-safe-states/solution/
                approach 1 -> Reverse Edges. 
                    how to do -> have outgoingGraph, incomingGraph. 
                    We start from Terminal Node and works backward, each time remove an edge from outgoingGraph, if outgoingGraph is None, it's 'qualify' too
                approach 2 -> 
                    ... 