############### THIS IS A LIST OF DP BECAUSE GOOGLE LOVES THIS AND THERE ARE TOO MANY PATTERNS 
############### DYNAMIC PROGRAMMING 5 Main Patterns 
https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns#DP-on-Strings
    Minimum (Maximum) Path to Reach a Target
        example -> min to reach a target Coin Change
    Distinct Ways : distinct ways to reach target
        example -> Unique Path 
    Merging Intervals : given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.
        example -> 
    palindromic subsequence : given two strings s1 and s2, return some result
        example -> 
    longest common substring  : given two strings s1 and s2, return some result
        example -> 
    Decision Making/ State Machine : decide whether to use current or not 
        esample -> Buy Sell Stock

### minimum/ maximum path to reach a target
https://leetcode.com/problems/coin-change do it myself, unbounded knapsack
https://leetcode.com/problems/minimum-path-sum/ do it myself 
    how to do -> update matrix in-place with previous 
    https://leetcode.com/problems/minimum-path-sum/discuss/825410/Python3-Dynamic-Programming-90-w-Explaination small things but can improve big O
https://leetcode.com/problems/minimum-falling-path-sum/ do it myself
    how to do -> update matrix 
https://leetcode.com/problems/minimum-cost-for-tickets do it myself, unbounded knapsack  
    how to do -> each 'days', we buy 1-day 7-day and 30-day. Some days maybe not optimized but we only need last day.
    took me 4 hours -> 2 algorithm wrong, 358 wrong, and 'continue' wrong
    approach 1 -> recursion bottom-up go over everything 
    approach 2 -> ...
    https://leetcode.com/submissions/detail/727138197/ best overall, current = current-1 7 30 or 0
https://leetcode.com/problems/perfect-squares
    my try -> 225 / 588 because i used brute force even with memo
    https://leetcode.com/problems/perfect-squares/discuss/275311/Python-DP-and-BFS
    solution 1 -> Build up tabulation using min. relation is dp[i-j*j] so not [i-1] or [i-2]
    solution 2 -> BFS. layer. 
https://leetcode.com/problems/triangle/ do it myself in 40 minutes 
    how to do -> normal Minimum Failing Path but with Triangle 
    my try -> i tried 'directions' technique but it was messy


### distinct ways 
guide 
    2 pointers moving forward
https://leetcode.com/problems/unique-paths do it myself
https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/discuss/355894/Python-DP-with-memoization-explained


### merging intervals 
guide
    keep removing min/ max of intervals
https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/discuss/1510611/Greedy-Approach-oror-97-faster-oror-Well-Explained 
    # how to do : non-leaf is product of biggest leaves, sum is all non-leaf, find min sum -> just greedy 
    # code -> with min leaf node, we calculate non-leaf and add it to sum, then remove min.

https://leetcode.com/problems/unique-binary-search-trees/discuss/31761/Python-with-explanation.-I-guess-you-could-call-this-%22DP%22...
    # how to do -> go from 1->n with 'i' as middle. loop 'middle' and all combinations of left * combinations of right
    # my try -> i figure out some solutions, but i pass whole left array rather than left index. I did not figure out the relation 


### decision making (State Machine, a type of 0/1 knapsack)
guide
    draw state machine 

https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/discuss/803206/PythonJSGoC%2B%2B-O(n)-by-DP-w-Visualization redo, knapsack 0/1, decision making
    # cur_hold : we bought and waiting to sell 
    # everytime we buy something it's negative 
    # either we buy it previously, or we buy current price
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75928/Share-my-DP-solution-(By-State-Machine-Thinking) 
    normal order 
    temp = beforeBuy
    tempA = beforeSell
    beforeBuy = max(beforeBuy, beforeRest)
    beforeSell = max(beforeSell, temp-p ) 
    beforeRest = tempA + p

    reverse order  
    temp = beforeRest
    beforeRest = beforeSell + p
    beforeSell = max(beforeSell, beforeBuy-p ) 
    beforeBuy = max(before, temp)



https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/solution/
    # what to do if better prices 10 later
    # -> basically the more buy/ sell the better
    # -> remeber we don't sell yet, we only testing which one better
    # -> most importantly, we buy 1 sell at 9, immediately buy that 9 again and it's not that good
        
### dp on strings I palindromic subsequence 
guide
    principal
        expand from small precomputed to bigger with 2D as slicing index 
    algo
        https://leetcode.com/problems/longest-palindromic-substring/discuss/900639/Python-Solution-%3A-with-detailed-explanation-%3A-using-DP
        build 2D array with [2][3] as [2:3]. don't worry about inclusive. 
        the main diagonal will always be palindrom
        we only compute upper 
        if letter at i, and letter at j same 
            if only 2 letters, or if the middle is same, they are palindrom 
            



            


https://leetcode.com/problems/palindromic-substrings do it myself 128/130 cases 
    use precomputed palindrom to compute larger palindrom 
    https://leetcode.com/problems/palindromic-substrings/discuss/392119/Solution-in-Python-3-(beats-~94)-(six-lines)-(With-Detaiiled-Explanation)
        # expand around center. 
        # (b - a - 1) is length of palindrome
        # length of palindrome has a pattern to predict how many palindrom with the same center inside (L+1)//2
        # (b-a)//2 is total palindrome  
        # for a,b in [(i,i),(i,i+1)] palindrom can be center in middle (odd) and center with 2 medians (even)


### dp on strings II longest common subsequence
guide
    2 pointers for 2 strings, then branch.
    or use tabulation. Only move bottom, right, or bottom right diagonally 
https://leetcode.com/problems/is-subsequence/
https://leetcode.com/problems/longest-common-subsequence/discuss/598508/Python-DP-solution-with-Explanation-%2B-Thinking-process-%2B-Diagram
    DP on strings by move forward 2 pointers
    0/1 knapsack 



############### DYNAMIC PROGRAMMING OTHER PATTERNS 
### patterns 
    greedy
        greedy is a specific kind of DP, and DP is a general greedy.
    0/1 knapsack 
    unbounded knapsack 
    fib
    1D dynamic programming 
    2D dynamic programming

### general
https://leetcode.com/problems/maximum-subarray/ do it myself 
    how to do -> if number before is negative, remove them 
https://leetcode.com/problems/pascals-triangle/ do it myself
    how to do -> 
https://leetcode.com/problems/race-car/
    https://leetcode.com/problems/race-car/discuss/762584/Python-C%2B%2B-3-Simple-Steps-(BFS) 
        what's cool -> Race-car is a BFS problem, since we are given a target and have to find the shortest distance to reach there
        how to do -> 
            always move forward 
            only consider changing the direction if 2 conditions : drive pass and go furthur, go back and go way back 
            then ...

    https://leetcode.com/problems/race-car/discuss/1512080/Greedy-Approach-oror-Normal-conditions-oror-94-faster-oror-Well-Coded
        similar idea to above solution 
https://leetcode.com/problems/house-robber/ do it myself 
    how to do -> extremely easy 

### greedy
guide  
    dp use previously computed results, greedy don't

### 0-1 knapsack either pick or don't pick
https://leetcode.com/problems/maximum-profit-in-job-scheduling/ binary search with dynamic programming knapsack bounded. 
    # https://leetcode.com/problems/maximum-profit-in-job-scheduling/discuss/996255/Python-using-DP-%2B-Binary-Search-(not-using-bisect-built-in)
    # 2 problems 0-1 knapsack and non overlapping 
    # sorted by endTime
    # binary search with (dpEndTime, start) as (right, target), find nonoverlapping time
    # dp -> if it's bigger profit, add endTime and add profit 

### 0/1 bounded knapsack items can't be repeated
https://leetcode.com/problems/partition-equal-subset-sum/ interview others
    https://www.youtube.com/watch?v=IsvocB5BJhw 6:00 10:40 very good O(n) analyze, last minute also have optimization
        how to do -> 
            0/1 knapsack 
            cascading keep adding new numbers to set of sums
    https://leetcode.com/problems/partition-equal-subset-sum/discuss/1624391/Python-DP-and-DFS-Solutions-Easy-to-understand-with-Explanation
        how to do -> 


### unbounded knapsack
guide 




############### DYNAMIC PROGRAMMING GUIDE 
### guide
use DP whenever you have to make 'choices'
top-down with memoization : recursion 
bottom-up with tabluation : tabulation
If all subproblems must be solved at least once, bottom-up better


### guide MIT 
#https://www.youtube.com/watch?v=r4-cftqTcdI&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY&index=25
SRTBOT sub-problems, relations, topological order, base case, original problem, and time. // check blackboard on video 
DP = recursion + memo
memoization : remember and reuse 
DAG shortest path 30:00
// stop 31 

### guide freecodecamp
algorithm whiteboard is hard, translating it into code is the hard part
students have habit of picture something in their mind
base cases donâ€™t branch anymore
try to find familiar in new problem
fib
    time O(2^n)
    dp time O(2n)
gridTraveller memoization
    // stop 41

#https://www.youtube.com/watch?v=mBNrRy2_hVs&s
longest common subsequence


### articles 
https://www.quora.com/Are-there-any-good-resources-or-tutorials-for-dynamic-programming-DP-besides-the-TopCoder-tutorial 
    iteration is much faster than recursion
    the author finds it's easier to come up with solution through top-down rather than bottom-up
    and you can come up with top-down through backtracking (try to minimize redundant argument, make function call O(1)) + cache 

https://www.topcoder.com/thrive/articles/Dynamic%20Programming:%20From%20Novice%20to%20Advanced
    Novice 
        Coin Change 
        state -> state represents subproblem. Example for money amount of 3 (state), we need coin of 1 and coin of 2 
    Elementary 
        Longest Non-Decreasing Subsequence passing one state to another 
        recurrent relation -> 
        s[i] = s[j] + 1 so j is prior ...

    Intermediate 
        similar to Unique Paths problem. Bi-dimensional DP problems
        first come up with state, then recurrent relation 

    Upper-Intermediate
        additional condition besides the values that must be calculated
        ...Given an undirected graph G having positive weights and N vertices...


    Advanced








https://leetcode.com/discuss/general-discussion/662866/Dynamic-Programming-for-Practice-Problems-Patterns-and-Sample-Solutions